const { createHash } = require('crypto')
let Reg = /\|?(.*)([.|] *?)([0-9]*)$/i
let handler = async function (m, { text, usedPrefix }) {
  let user = global.DATABASE._data.users[m.sender]
  if (user.registered === true) throw `You are already registered\nWant to re-register? ${usedPrefix}unreg <SN|SERIAL NUMBER>`
  if (!Reg.test(text)) throw `·¥° Ä·¥è…¥…¢ “ì·¥è Ä·¥ç·¥Ä·¥õ\n*${usedPrefix}register age.age*`
  let [_, name, splitter, age] = text.match(Reg)
  if (!name) throw '…¥·¥Ä·¥ç·¥ás ·¥Ñ·¥Ä…¥…¥·¥è·¥õ  ô·¥á ·¥á·¥ç·¥ò·¥õ è (Alphanumeric) '
  if (!age) throw '·¥Ä…¢·¥á ·¥Ñ·¥Ä…¥…¥·¥è·¥õ  ô·¥á  ô ü·¥Ä…¥·¥ã (Numbers)'
  age = parseInt(age)
  if (age > 40) throw '·¥Ä…¢·¥á ·¥õ·¥è·¥è ·¥è ü·¥Ö üòÇ ·¥ò ü·¥á·¥Äs ·¥Ö·¥á·¥Ä·¥Ö'
  if (age < 5) throw ' ô·¥Ä ô…™·¥ás ·¥Ñ·¥Ä…¥ ·¥õ è·¥ò·¥á ·¥Ä·¥Ñ·¥Ñ·¥è Ä·¥Ö…™…¥…¢ ·¥õ ú·¥á  ô·¥ä…™ Ä Ä “ì·¥è Ä·¥ç·¥Ä·¥õ._.'
  user.name = name.trim()
  user.age = age
  user.regTime = + new Date
  user.registered = true
  let sn = createHash('md5').update(m.sender).digest('hex')
  m.reply(`
·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ s·¥ú·¥Ñ·¥Ñ·¥áss!!

‚ï≠‚îÄ *_„Äå ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ „Äç_*
‚îÇ *…¥·¥Ä·¥ç·¥á* : ${name}
‚îÇ *·¥Ä…¢·¥á* : ${age}  è·¥á·¥Ä Ä ·¥è ü·¥Ö
‚îÇ *s…¥* : ${sn}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
`.trim())
}
handler.help = ['daftar', 'reg', 'register'].map(v => v + ' <name>.<age>')
handler.tags = ['exp']

handler.command = /^(daftar|reg(ister)?)$/i

module.exports = handler

